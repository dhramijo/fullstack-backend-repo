name: Backend CI/CD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: self-hosted # Use self-hosted runner

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: "temurin"
          java-version: "17"

      # Step 3: Build the Backend with Maven
      - name: Build with Maven
        run: |
          mvn clean install
        working-directory: "."

      # Step 4: Ensure Minikube Cluster is Running with cri-o (instead of Podman)
      - name: Ensure Minikube Cluster is Running with cri-o Driver
        run: |
          minikube start --driver=podman --container-runtime=cri-o

      # Step 5: Set Podman Environment for Minikube
      - name: Set Podman Environment for Minikube
        run: |
          eval $(minikube -p minikube podman-env)  # This should work now with cri-o runtime

      # Step 6: Build Docker Image using Podman
      - name: Build Docker Image with Podman
        run: |
          podman build -t backend-image:latest .

      # Step 7: Save Image for Minikube
      - name: Save Image for Minikube
        run: |
          podman save backend-image:latest -o backend-image.tar

      # Step 8: Copy Image into Minikube
      - name: Copy Image into Minikube
        run: |
          minikube cp backend-image.tar /tmp/

      # Step 9: Load Image into Minikube's Podman
      - name: Load Image into Minikube's Podman
        run: |
          minikube ssh "podman load -i /tmp/backend-image.tar"

      # Step 10: Set up Kubernetes Config
      - name: Set up Kubernetes Config
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml

      # Step 11: Deploy to Kubernetes
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/backend-deployment.yaml
          kubectl apply -f k8s/backend-service.yaml
          kubectl apply -f k8s/backend-ingress.yaml

      # Step 12: Restart Deployment
      - name: Restart Backend Deployment
        run: |
          kubectl rollout restart deployment backend-deployment

      # Step 13: Verify Deployment
      - name: Verify Deployment
        run: |
          kubectl get pods --all-namespaces
