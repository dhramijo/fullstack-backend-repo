name: Backend CI/CD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: self-hosted  # Use the self-hosted runner

    steps:
      # 1. Checkout the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v2

      # 2. Set up JDK 17 using Temurin distribution
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'  # Temurin is the correct distribution name
          java-version: '17'       # Specify Java version 17

      # 3. Build the backend project with Maven
      - name: Build with Maven
        run: mvn clean install
        working-directory: ./backend  # Change this to the correct relative directory of your backend project

      # 4. Build Docker image using Podman
      - name: Build Docker image with Podman
        run: |
          podman build -t ${{ secrets.DOCKER_USERNAME }}/backend-image .  # Use your Docker username for tagging
        working-directory: ./backend  # Change this to the correct relative directory of your backend project

      # 5. Log into Docker registry (Docker Hub) using Podman
      - name: Podman Login to Docker Hub
        run: |
          podman login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} # Authenticate with Docker Hub

      # 6. Push Docker image to Docker registry (using Podman)
      - name: Push Docker image with Podman
        run: |
          podman push ${{ secrets.DOCKER_USERNAME }}/backend-image  # Push the Docker image to Docker Hub or another registry

      # 7. Set up Kubernetes credentials using the kubeconfig from GitHub secrets
      - name: Set up Kubernetes
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml  # Write the kubeconfig content to a file
          export KUBECONFIG=kubeconfig.yaml  # Set the KUBECONFIG environment variable

      # 8. Deploy to Kubernetes (Minikube)
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/backend-deployment.yaml   # Apply the backend deployment YAML
          kubectl apply -f k8s/backend-service.yaml      # Apply the backend service YAML
          kubectl apply -f k8s/backend-ingress.yaml      # Apply the backend ingress YAML
